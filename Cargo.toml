[package]
name = "bevy_egui"
version = "0.33.0"
# Needed for LazyLock https://doc.rust-lang.org/stable/std/sync/struct.LazyLock.html
rust-version = "1.80.0"
authors = ["vladbat00 <vladyslav.batyrenko@gmail.com>"]
description = "A plugin for Egui integration into Bevy"
license = "MIT"
edition = "2021"
repository = "https://github.com/vladbat00/bevy_egui"
exclude = ["assets/**/*", ".github/**/*"]

[package.metadata.docs.rs]
features = ["bevy_winit/x11"]
all-features = true

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html
[features]
default = ["manage_clipboard", "open_url", "default_fonts", "render", "picking"]
immutable_ctx = []
manage_clipboard = ["arboard", "thread_local", "bytemuck"]
open_url = ["webbrowser"]
default_fonts = ["egui/default_fonts"]
render = [
    "bevy_asset",
    "bevy_image",
    "bevy_render",
    "encase",
    "bytemuck",
    "egui/bytemuck",
    "wgpu-types",
]
picking = ["bevy_picking"]
serde = ["egui/serde"]
# The enabled logs will print with the info log level, to make it less cumbersome to debug in browsers.
log_input_events = []

[[example]]
name = "absorb_input"
required-features = ["render"]
[[example]]
name = "color_test"
required-features = ["render"]
[[example]]
name = "paint_callback"
required-features = ["render"]
[[example]]
name = "render_to_image_widget"
required-features = ["render"]
[[example]]
name = "side_panel_2d"
required-features = ["render"]
[[example]]
name = "side_panel_3d"
required-features = ["render"]
[[example]]
name = "simple"
required-features = ["render"]
[[example]]
name = "simple_multipass"
required-features = ["render"]
[[example]]
name = "two_windows"
required-features = ["render"]
[[example]]
name = "ui"
required-features = ["render"]
[[example]]
name = "render_egui_to_image"
required-features = ["picking", "render", "bevy/bevy_gizmos"]

[dependencies]
egui = { version = "0.31", default-features = false }
bevy_app = { path = "../../bevy_engine/crates/bevy_app" }
bevy_derive = { path = "../../bevy_engine/crates/bevy_derive" }
bevy_ecs = { path = "../../bevy_engine/crates/bevy_ecs" }
bevy_input = { path = "../../bevy_engine/crates/bevy_input" }
bevy_log = { path = "../../bevy_engine/crates/bevy_log" }
bevy_math = { path = "../../bevy_engine/crates/bevy_math" }
bevy_reflect ={ path = "../../bevy_engine/crates/bevy_reflect" }
bevy_time = { path = "../../bevy_engine/crates/bevy_time" }
bevy_utils = { path = "../../bevy_engine/crates/bevy_utils" }
bevy_winit = {  path = "../../bevy_engine/crates/bevy_winit", features = ["custom_cursor"] }
bevy_window = { path = "../../bevy_engine/crates/bevy_window" }

# `open_url` feature
webbrowser = { version = "1.0.1", optional = true }

# `render` feature
bytemuck = { version = "1", optional = true }
bevy_asset = { path = "../../bevy_engine/crates/bevy_asset" , optional = true }
bevy_image = { path = "../../bevy_engine/crates/bevy_image" , optional = true }
bevy_render = { path = "../../bevy_engine/crates/bevy_render" , optional = true }
encase = { version = "0.10", optional = true }
wgpu-types = { version = "23.0", optional = true }

# `picking` feature
bevy_picking = { path = "../../bevy_engine/crates/bevy_picking" , optional = true }

# `manage_clipboard` feature
[target.'cfg(not(any(target_arch = "wasm32", target_os = "android")))'.dependencies]
arboard = { version = "3.2.0", optional = true }
thread_local = { version = "1.1.0", optional = true }

[dev-dependencies]
version-sync = "0.9.4"
bevy = { path = "../../bevy_engine" , default-features = false, features = [
    "bevy_asset",
    "bevy_core_pipeline",
    "bevy_pbr",
    "bevy_mesh_picking_backend",
    "bevy_sprite",
    "bevy_window",
    "bevy_winit",
    "android-game-activity",
    "png",
    "tonemapping_luts",
    "webgl2",
    "x11",
] }
egui = { version = "0.31", default-features = false, features = ["bytemuck"] }

[target.'cfg(target_arch = "wasm32")'.dependencies]
winit = "0.30"
web-sys = { version = "0.3.74", features = [
    "Clipboard",
    "ClipboardEvent",
    "ClipboardItem",
    "CompositionEvent",
    "DataTransfer",
    "Document",
    "EventTarget",
    "HtmlInputElement",
    "InputEvent",
    "KeyboardEvent",
    "Navigator",
    "TouchEvent",
    "Window",
] }
image = { version = "0.25.5", features = ["png"] } # For copying images
js-sys = "0.3.63"
wasm-bindgen = "0.2.84"
wasm-bindgen-futures = "0.4.36"
crossbeam-channel = "0.5.8"
